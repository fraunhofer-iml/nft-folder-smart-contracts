stages:
  - build
  - analyze
  - test
  - license

variables:
  GIT_DEPTH: 0
  HUSKY: 0
  NPM_CI: npm ci --include dev --cache .npm --prefer-offline
  SLITHER_ANALYZER_PACKAGE: slither-analyzer==0.9.3

default:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
    policy: pull
  image: node:20-alpine3.19
  timeout: 20 minutes

.pull-push-cache:
  cache:
    policy: pull-push

#############
### build ###
#############

install-dependencies:
  stage: build
  extends: .pull-push-cache
  script:
    - $NPM_CI
  rules:
    - when: always

compile-contracts:
  stage: build
  needs:
    - 'install-dependencies'
  before_script:
    - $NPM_CI
  script:
    - npm run compile
  artifacts:
    name: 'compiled-smart-contracts'
    expose_as: 'Compiled Smart Contracts'
    expire_in: 20 minutes
    paths:
      - build
  rules:
    - when: on_success

###############
### analyze ###
###############

run-eslint:
  stage: analyze
  before_script:
    - $NPM_CI
  script:
    - npm run eslint:check
  rules:
    - when: on_success

run-prettier:
  stage: analyze
  before_script:
    - $NPM_CI
  script:
    - npm run prettier:check
  rules:
    - when: on_success

run-slither:
  stage: analyze
  before_script:
    - $NPM_CI
    - apk --update add gcc libc-dev python3-dev py3-pip
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install wheel ${SLITHER_ANALYZER_PACKAGE}
  script:
    - slither . --truffle-ignore-compile --exclude-dependencies --filter-paths openzeppelin
  rules:
    - when: on_success

run-solhint:
  stage: analyze
  before_script:
    - $NPM_CI
  script:
    - npm run solhint
  rules:
    - when: on_success

# TODO-MP: https://github.com/sc-forks/solidity-coverage removed all truffle related code, but a new project will be created soon
.run-solidity-coverage:
  stage: analyze
  script:
    - npm run solidity-coverage
  rules:
    - when: on_success

# TODO-MP: reactivate with SE-11105
.run-sonar-scanner:
  stage: analyze
  image: red6/docker-sonar-scanner:latest
  script:
    - >
      sonar-scanner
      -Dproject.settings=sonar.properties
      -Dsonar.host.url="${SONAR_HOST_URL}"
      -Dsonar.login="${SONAR_TOKEN}"
  rules:
    - when: on_success

############
### test ###
############

run-unit-tests:
  stage: test
  before_script:
    - $NPM_CI
  script:
    - npm run test
  rules:
    - when: on_success

###############
### license ###
###############

create-npm-licenses-list:
  stage: license
  variables:
    LICENSES_LIST: 'npm-licenses-list.csv'
    LICENSES_OVERRIDES: 'third-party-licenses/npm-licenses-overrides.txt'
    EXCLUDED_PACKAGES: ''
  before_script:
    - $NPM_CI
    - >
      if [ -e ${LICENSES_OVERRIDES} ]; then
        EXCLUDED_PACKAGES=$(cat ${LICENSES_OVERRIDES});
      fi
  script:
    - >
      npx license-checker
      --production
      --unknown
      --csv
      --excludePrivatePackages
      --excludePackages "${EXCLUDED_PACKAGES}"
      --onlyAllow "${NPM_LICENSE_CHECKER_WHITELIST}"
      --out "${LICENSES_LIST}"
    - >
      if [ ${EXCLUDED_PACKAGES} ]; then
        echo -e "\n\nManually overridden packages excluded from the licenses check:\n${EXCLUDED_PACKAGES}" >> ${LICENSES_LIST};
      fi
    - cat "${LICENSES_LIST}"
  artifacts:
    name: 'npm-licenses-list'
    expose_as: 'NPM Licenses List'
    expire_in: 1 hour
    paths:
      - $LICENSES_LIST
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

publish-all-licenses-list:
  stage: license
  needs:
    - 'create-npm-licenses-list'
  before_script:
    - mkdir -p public
  script:
    - >
      for file in *licenses-list.csv; do
        mv "$file" public/
        echo -e "\n\nGenerated on branch ${CI_COMMIT_BRANCH} for commit ${CI_COMMIT_SHA} @ ${CI_COMMIT_TIMESTAMP}" >> public/"$file"
      done
    - echo "Publishing the lists of dependencies and their licenses on GitLab Pages ..."
  artifacts:
    name: 'all-licenses-list'
    expose_as: 'All Licenses List'
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
